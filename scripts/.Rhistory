# Appears that in 2018 alternative definitions of maturity began to be examined. This resulted in extra columns for ln(CW), meas'd ln(Ch), calc ln(Ch), mat, and Mat1. Because there's some odd variable names there, remove based on indexing
new_data <- new_data[, -c(6:10)]
# Check again if names match between 2018 data and our full_data table
all_equal(full_data, new_data)
# Again, appears that the mismatches in column names are simple differences in name formatting, not overall sheet organization. Therefore we can simply rename our columns
new_data <- new_data %>%
rename(
Chela = chela,
"Host_Tissue" = "Host Tissue"
)
# See if we have any other mismatches
all_equal(new_data, full_data, ignore_col_order = FALSE, convert = TRUE)
# Join the 2018 data to the table with data from previous years
full_data <- bind_rows(full_data, new_data)
# Read in file from 2019
new_data <- read_excel(files[6], sheet = 3)
# Check if names match between 2019 data and our full_data table
all_equal(full_data, new_data)
# Looks like there are 9 extra columns in the 2019 data. Let's see where these are
names(new_data)[names(full_data) != names(new_data)]
# Appears that the examination of alternative definitions of maturity continued. This resulted in six extra columns noting chela height and carapace width calculations. Furthermore, there are three columns on the end that should be removed - they appear to have been used only for calculations. Because there's some odd variable names there, remove based on indexing
new_data <- new_data[, -c(5, 7:11, 43:45)]
# Check again if names match between 2019 data and our full_data table
all_equal(full_data, new_data)
# Again, appears that the mismatches in column names are simple differences in name formatting, not overall sheet organization. Therefore we can simply rename our columns
new_data <- new_data %>%
rename(
Chela = chela,
"Host_Tissue" = "Host Tissue",
VESSEL = Vessel,
HAUL = Haul
)
# See if we have any other mismatches
all_equal(new_data, full_data, ignore_col_order = FALSE, convert = TRUE)
# Join the 2019 data to the table with data from previous years
full_data <- bind_rows(full_data, new_data)
names(full_data) <- str_replace_all(names(full_data), c(" " = "_", "," = ""))
full_data <- subset(full_data, select = -c(SPNO, Random, Collection_Comments, ANOM_ID, General_Location, Collected_By, Reference_NO, DNA_Plate_No, DNA_Well_No, Host_Tissue, Preservative, Sample_Status, C_V_H, CRUISE, VESSEL, HAUL, GEAR_DEPTH, SURFACE_TEMP))
table(full_data$Egg_Cond)
# Can eliminate - indicates little beyond egg presence
full_data <- subset(full_data, select = -Egg_Cond)
table(full_data$Specific_Location)
# Can eliminate - sites are year-specific
full_data <- subset(full_data, select = -Specific_Location)
table(full_data$Egg_Color, full_data$PCR_result)
# Practically all eggs are either 0 (absent) or 4 (orange). We already have clutch fullness data which provides presence/absence information (and more), so this column can be removed.
full_data <- subset(full_data, select = -Egg_Color)
table(full_data$STRATUM, full_data$Year)
# Looks like for all of 2008, we have almost entirely NAs. Therefore, rather than losing a year, let's drop and use latitude/longitude
full_data <- subset(full_data, select = -STRATUM)
full_data
full_data$STATIONID
table(full_data$STATIONID, full_data$Year
table(full_data$STATIONID, full_data$Year)
table(full_data$STATIONID, full_data$Year)
View(new_data)
# Practically all eggs are either 0 (absent) or 4 (orange). We already have clutch fullness data which provides presence/absence information (and more), so this column can be removed.
full_data <- subset(full_data, select = -STATIONID)
table(full_data$Sex)
# First, we will convert START_TIME to Julian day (day from the start of the year)
full_data$JUL_DAY <- yday(full_data$START_TIME)
# Add all required libraries here
list.of.packages <- c("tidyverse", "readxl", "lubridate")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# First, we will convert START_TIME to Julian day (day from the start of the year)
full_data$JUL_DAY <- yday(full_data$START_TIME)
View(full_data)
min(full_data$JUL_DAY)
max(full_data$JUL_DAY)
hist(full_data$JUL_DAY)
table(full_data$Sex)
# Eliminate all 4 rows where sex is unknown (=3)
full_data[full_data$Sex == 3,]
# Eliminate all 4 rows where sex is unknown (=3)
full_data[-full_data$Sex == 3,]
# Eliminate all 4 rows where sex is unknown (=3)
full_data[!(full_data$Sex == 3),]
# Eliminate all 4 rows where sex is unknown (=3)
subset(full_data, Sex = 3)
# Eliminate all 4 rows where sex is unknown (=3)
subset(full_data, Sex == 3)
# Eliminate all 4 rows where sex is unknown (=3)
subset(full_data, Sex < 3)
# Eliminate all 4 rows where sex is unknown (=3)
subset(full_data, Sex < 3)
View(full_data)
sum(is.na(full_data$Sex))
# Eliminate all 4 rows where sex is unknown (=3), along with the 6 rows where sex is NA
full_data <- subset(full_data, Sex < 3)
table(full_data$Species_Name)
sum(is.na(full_data$Species_Name))
table(full_data$Species_Name)
# Eliminate the one helmet crab included in the data set
table(full_data$Species_Name, full_data$PCR_result)
# Eliminate the one helmet crab included in the data set
full_data <- subset(full_data, Species_Name != "Telmessus cheiragonus")
hist(full_data$Size)
sum(is.na(full_data$Size))
summary(full_data$Size)
hist(full_data$Size)
table(full_data$Shell_Cond)
# #liminate all 0s, 1s, and 2s (soft-, fresh- and very very old-shell crab. 10 total among all 3 categories)
subset(full_data, Shell_Cond < 5 & Shell_Cond > 2)
# #liminate all 0s, 1s, and 2s (soft-, fresh- and very very old-shell crab. 10 total among all 3 categories)
subset(full_data, Shell_Cond < 5 & Shell_Cond > 1)
table(full_data$Shell_Cond)
sum(is.na(full_data$Shell_Cond))
# #liminate all 0s, 1s, and 2s (soft-, fresh- and very very old-shell crab. 10 total among all 3 categories). Also eliminates the 10 crabs with NA shell condition
full_data <- subset(full_data, Shell_Cond < 5 & Shell_Cond > 1)
View(full_data)
table(full_data$Clutch)
# Given the relatively small number of crabs with eggs, I think it makes more sense to change this to 0 (no eggs present) and 1 (eggs present). Essentially, all crabs with egg codes from 1-6 will be converted to egg code 1
full_data$Clutch <- recode_factor(full_data$Clutch, "0" = "0", "1" = "1", "2" = "1", "3" = "1", "4" = "1", "5" = "1", "6" = "1")
View(full_data)
table(full_data$PCR_result)
View(full_data)
# Only want to keep conclusive PCR results, so eliminating all NAs and 3s
full_data <- subset(full_data, PCR_result < 2)
table(full_data$Year)
View(full_data)
colSums(is.na(full_data))
colSums(is.na(full_data[full_data$Sex == 1, ]))
colSums(is.na(full_data[full_data$Sex == 2, ]))
hist(full_data$Sex)
hist(full_data$Size)
# Since male and female Chionoecetes crab have quite different sizes, we'll check for each of these separately
hist(full_data[full_data$Sex == 1, ]$Size)
hist(full_data[full_data$Sex == 2, ]$Size)
summary(full_data[full_data$Sex == 1, ]$Size)
summary(full_data[full_data$Sex == 2, ]$Size)
summary(full_data[full_data$Sex == 1, ]$Size)
summary(full_data[full_data$Sex == 2, ]$Size)
hist(full_data$Chela)
summary(full_data$Chela)
View(full_data)
# We can now drop the START_TIME column
full_data <- subset(full_data, select = -START_TIME)
hist(full_data$START_LATITUDE)
# Add all required libraries here
list.of.packages <- c("tidyverse", "readxl", "lubridate", "rnaturalearth")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Add all required libraries here
list.of.packages <- c("tidyverse", "readxl", "lubridate", "rnaturalearth", "rnaturalearthdata", "sf")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
?ne_countries
# Now moving on to latitude and longitude. For this, we will map each point
world <- ne_countries(scale = "medium", returnclass = "sf")
# Add all required libraries here
list.of.packages <- c("tidyverse", "readxl", "lubridate", "rnaturalearth", "rnaturalearthdata", "sf", "rgeos")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Now moving on to latitude and longitude. For this, we will map each point
world <- ne_countries(scale = "medium", returnclass = "sf")
names(full_data)
View(full_data)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 4, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
# Now moving on to latitude and longitude. For this, we will map each point
world <- ne_countries(scale = "medium", returnclass = "sf")
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred")
# No global data entry errors - all are clustered within the EBS region. However, let's examine on a smaller scale
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
hist(full_data$BOTTOM_DEPTH)
summary(full_data$BOTTOM_DEPTH)
View(full_data)
# Moving on to
hist(full_data$Bottom_Temp)
summary(full_data$Bottom_Temp)
# A temperature of 9 degrees seems anomalous - let's examine further
head(sort(full_data$Bottom_Temp))
?sort
# A temperature of 9 degrees seems anomalous - let's examine further
head(sort(full_data$Bottom_Temp, decreasing = TRUE))
# A temperature of 9 degrees seems anomalous - let's examine further
head(sort(unique(full_data$Bottom_Temp), decreasing = TRUE))
View(full_data)
# Moving on to
hist(full_data$JUL_DAY)
# No global data entry errors - all are clustered within the EBS region. However, let's examine on a smaller scale
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
## Plot same map but with lines showing boundaries of Bristol Bay cluster (BB)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_line(aes(x = -150, y = 59), size = 1) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
## Plot same map but with lines showing boundaries of Bristol Bay cluster (BB)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_line(aes(x = -170, y = 59), size = 1) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
## Plot same map but with lines showing boundaries of Bristol Bay cluster (BB)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
## Plot same map but with lines showing boundaries of Bristol Bay cluster (BB)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -165, linetype = "solid", color = "black")
## Plot same map but with lines showing boundaries of Bristol Bay cluster (BB)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -165, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
## Plot same map but with lines showing boundaries of Bristol Bay cluster (BB)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -162, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
## Plot same map but with lines showing boundaries of Bristol Bay cluster (BB)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -168, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
## Plot same map but with lines showing boundaries of Bristol Bay cluster (BB)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 57, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
## Plot same map but with lines showing boundaries of Bristol Bay cluster (BB)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 58, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
full_data$Location <- 0
View(full_data)
full_data[full_data$START_LATITUDE < 58 & full_data$START_LONGITUDE > -167]
full_data[full_data$START_LATITUDE < 58 & full_data$START_LONGITUDE > -167,]
full_data[full_data$START_LATITUDE < 58 & full_data$START_LONGITUDE > -167,]$Location <- 1
View(full_data)
# Map all hauls where location = 1 to ensure we assigned correctly
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data[full_data$Location == 1,], aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 58, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59.5, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
geom_vline(xintercept = -172, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
geom_vline(xintercept = -173, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
# Assign a Location of 1 to the Bristol Bay cluster
full_data[full_data$START_LATITUDE < 58 & full_data$START_LONGITUDE > -167,]$Location <- "BB"
# Create new column for location (initially 0 for all crab)
full_data$Location <- "Not Assigned"
# Assign a Location of 1 to the Bristol Bay cluster
full_data[full_data$START_LATITUDE < 58 & full_data$START_LONGITUDE > -167,]$Location <- "BB"
# Map all hauls where location = 1 to ensure we assigned correctly
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data[full_data$Location == "BB",], aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
full_data[full_data$START_LATITUDE < 59 & full_data$START_LONGITUDE < -167 & full_data$START_LONGITUDE > -173,]$Location <- "BB"
full_data[full_data$START_LATITUDE < 59 & full_data$START_LONGITUDE < -167 & full_data$START_LONGITUDE > -173,]$Location <- "PI"
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data[full_data$Location == "PI",], aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
# Map all hauls where location = "BB" to ensure we assigned correctly
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data[full_data$Location == "BB",], aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
geom_vline(xintercept = -173, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 60, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
geom_vline(xintercept = -173, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 60, linetype = "solid", color = "black") +
geom_vline(xintercept = -172, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -172, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59.5, linetype = "solid", color = "black") +
geom_vline(xintercept = -172, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59.5, linetype = "solid", color = "black") +
geom_vline(xintercept = -173, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59.5, linetype = "solid", color = "black") +
geom_vline(xintercept = -173, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
full_data[full_data$START_LATITUDE < 59.5 & full_data$START_LONGITUDE < -173,]$Location <- "SS"
# Plot to make sure we didn't screw anything up
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data[full_data$Location == "SS",], aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
geom_vline(xintercept = -173, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 64, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
geom_vline(xintercept = -173, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 61, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
geom_vline(xintercept = -173, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 62, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
geom_vline(xintercept = -173, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 62, linetype = "solid", color = "black") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
geom_vline(xintercept = -173, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 62, linetype = "solid", color = "black") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
geom_vline(xintercept = -173.5, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 62, linetype = "solid", color = "black") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -167, linetype = "solid", color = "black") +
geom_vline(xintercept = -173.25, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 62, linetype = "solid", color = "black") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -168, linetype = "solid", color = "black") +
geom_vline(xintercept = -173.25, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
full_data[full_data$START_LATITUDE > 59 & full_data$START_LATITUDE < 62 & full_data$START_LONGITUDE < -168 & full_data$START_LONGITUDE > -173.25,]$Location <- "PI"
full_data[full_data$START_LATITUDE > 59 & full_data$START_LATITUDE < 62 & full_data$START_LONGITUDE < -168 & full_data$START_LONGITUDE > -173.25,]$Location <- "SMI"
full_data[full_data$START_LATITUDE > 59 & full_data$START_LATITUDE < 62 & full_data$START_LONGITUDE < -168 & full_data$START_LONGITUDE > -173.25,]$Location <- "SMI"
# Plot to make sure we didn't screw anything up
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data[full_data$Location == "SMI",], aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 62, linetype = "solid", color = "black") +
geom_hline(yintercept = 59, linetype = "solid", color = "black") +
geom_vline(xintercept = -168, linetype = "solid", color = "black") +
geom_vline(xintercept = -173.25, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 63, linetype = "solid", color = "black") +
geom_hline(yintercept = 61, linetype = "solid", color = "black") +
geom_vline(xintercept = -173.25, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
full_data[full_data$START_LATITUDE > 61 & full_data$START_LATITUDE < 63 & full_data$START_LONGITUDE > -173.25,]$Location <- "NS"
# Plot to make sure we didn't screw anything up
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data[full_data$Location == "NS",], aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
full_data[full_data$START_LATITUDE > 61 & full_data$START_LATITUDE < 63 & full_data$START_LONGITUDE < -173.25,]$Location <- "NS"
# Plot to make sure we didn't screw anything up
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data[full_data$Location == "NS",], aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 63, linetype = "solid", color = "black") +
geom_hline(yintercept = 61, linetype = "solid", color = "black") +
geom_vline(xintercept = -173.25, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data, aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
geom_hline(yintercept = 63, linetype = "solid", color = "black") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
full_data[full_data$START_LATITUDE > 63,]$Location <- "SLI"
# Plot to make sure we didn't screw anything up
ggplot(data = world) +
geom_sf() +
geom_point(data = full_data[full_data$Location == "SLI",], aes(x = START_LONGITUDE, y = START_LATITUDE), size = 1, shape = 23, fill = "darkred") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
