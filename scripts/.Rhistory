names(GSPvalue) <- paste("p.GS", names(key_var), sep = "")
# Confirm formatting
head(GSPvalue)
# Determine module membership
# Obtain gene module membership stats
geneModuleMembership <- as.data.frame(cor(CrabExpr0, MEs, use = "p"))
# Add column names
names(geneModuleMembership) <- paste("MM", modNames, sep = "")
# Confirm formatting
head(geneModuleMembership)
# Obtain p-values for each module membership statistic
MMPvalue <- as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))
# Add column names
names(MMPvalue) <- paste("p.MM", modNames, sep = "")
# Confirm formatting
head(MMPvalue)
# Save gene names as probes
probes <- names(CrabExpr0)
# Create dataframe for storing module length (just for heatmap use)
mod_length <- data.frame(modNames, contigs = rep(NA, times = length(modNames)))
# Write out the gene lists for each module of interest
for (module in modNames) {
modGenes <- (moduleColors == module) # Select module probes
modLLIDs <- probes[modGenes] # Get gene IDs
fileName <- paste(file_start, "GeneList-", module, ".txt", sep = "") # Assign filename for each module
mod_length[modNames == module, ]$contigs <- length(modLLIDs) # Get length of each module (for heatmap only)
write.table(as.data.frame(modLLIDs), file = fileName, sep = "\t", row.names = FALSE, col.names = FALSE) # Write out files
}
kME_table <- signedKME(CrabExpr0,
datME = MEs0)
# Write kME file
fileName <- paste0(file_start, "kME_table.txt")
write.table(kME_table, file = fileName,
sep = "\t",
row.names = TRUE,
col.names = TRUE)
# Create labeled heat map of correlation values from textMatrix. Red = positive correlation, blue = negative correlation
path <- paste0(file_start, "ModuleTreatmentHeatMap.png")
png(path)
par(mar = c(10, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = c("Crab A vs. all",
"Crab B vs. all",
"Crab C vs. all",
"Crab D vs. all",
"Crab E vs. all",
"Crab F vs. all",
"Crab G vs. all",
"Grab H vs. all",
"Crab I vs. all",
"Day",
"Elev. vs. Ctrl",
"Low. vs. Ctrl",
"Low. vs. Elev.",
"Ctrl vs. all",
"Elev. vs. all",
"Low. vs. all",
"Infection Level",
"Carapace Width",
"Shell Condition"),
xLabelsAngle = 90,
yLabels = names(MEs),
ySymbols = mod_length$contigs,
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = TRUE,
cex.text = 0.5,
zlim = c(-1, 1))
dev.off()
# Plot image again, so it shows up in knitted .Rmd
par(mar = c(10, 8.5, 3, 3))
labeledHeatmap(Matrix = moduleTraitCor,
xLabels = c("Crab A",
"Crab B",
"Crab C",
"Crab D",
"Crab E",
"Crab F",
"Crab G",
"Grab H",
"Crab I",
"Day",
"Elev. vs. Ctrl",
"Low. vs. Ctrl",
"Low. vs. Elev.",
"Ctrl vs. all",
"Elev. vs. all",
"Low. vs. all",
"Infection Level",
"Carapace Width",
"Shell Condition"),
xLabelsAngle = 90,
yLabels = names(MEs),
ySymbols = mod_length$contigs,
colorLabels = FALSE,
colors = blueWhiteRed(50),
textMatrix = textMatrix,
setStdMargins = TRUE,
cex.text = 0.5,
zlim = c(-1, 1))
knitr::opts_chunk$set(echo = TRUE)
# Add all required libraries here
list.of.packages <- c("ggplot2", "tidyverse", "viridis")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Create data points for graph
# Low, Control, and High are the temperatures in celsius for each
# All values of 7.6 and 7.4 are just to jitter the graph
days <- c(-9, 0, 2, 15, 17)
Decreased <- c(7.4, 7.4, 4, 4, 4)
Control <- rep(7.5, times = 5)
Elevated <- c(7.6, 7.6, 10, 10, NA)
# Assemble into data frame
exp_data <- data.frame(days, Decreased, Control, Elevated)
# Pivot longer
exp_data <- pivot_longer(exp_data, cols = c(Decreased, Control, Elevated), names_to = "Treatment")
# Create another data table for sample events
# This means just removing all data points where day < 0
# as well as the Day 15 data (used to show when the last elevated-temp crab died)
sample_data <- exp_data %>%
filter(days > -1) %>%
filter(days != 15)
# Plot figure
png(file = "../graphs/paper_figures/fig_1.png")
ggplot(data = exp_data, aes(x = days, y = value, group = Treatment)) +
geom_line(size = 1.5, aes(color = Treatment)) +
geom_point(data = sample_data, size = 3, color = "gray30") +
theme_bw() +
scale_color_manual(values = c("#00BA38", "#619CFF", "#F8766D")) +
xlab("Experimental Days") +
ylab("Temperature (Celsius)")
dev.off()
ggplot(data = exp_data, aes(x = days, y = value, group = Treatment)) +
geom_line(size = 1.5, aes(color = Treatment)) +
geom_point(data = sample_data, size = 3, color = "gray30") +
theme_bw() +
scale_color_manual(values = c("#00BA38", "#619CFF", "#F8766D")) +
xlab("Experimental Days") +
ylab("Temperature (Celsius)")
knitr::opts_chunk$set(echo = TRUE)
# Add all required libraries here
list.of.packages <- c("tidyverse", "lubridate", "beepr")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Examine things related to crabs (1 row per crab sampled)
crab_dat <- read.csv(file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/crab_data/BCS_examined_crab_with_temperature.csv")
# Examine things related to location (1 row per pot deployment)
pot_dat <- read.csv(file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/pot_data_with_temperature.csv")
bitter <- crab_dat
names(bitter$Site)
unique(bitter$Site)
sites <- unique(bitter$Site)
site_dat <- bitter %>%
filter(Site = sites[i])
site_dat <- bitter %>%
filter(Site == sites[i])
?filter
site_dat <- bitter %>%
dplyr::filter(Site == sites[i])
View(bitter)
site_dat <- bitter %>%
dplyr::filter(Site == sites[1])
View(site_dat)
?summarize
bitter <- crab_dat
bitter$Temp <- round(bitter$Temp, digits = 0)
bitter$Year <- as.factor(bitter$Year)
sites <- unique(bitter$Site)
site_dat <- bitter %>%
dplyr::filter(Site == sites[1])
bitter <- crab_dat
bitter$Temp <- round(bitter$Temp, digits = 1)
bitter$Year <- as.factor(bitter$Year)
sites <- unique(bitter$Site)
site_dat <- bitter %>%
dplyr::filter(Site == sites[1])
site_avgs <- ddply(site_dat, Temp, summarise,
N = length(Bitter),
mean = mean(Bitter),
sd = sd(Bitter),
se = sd/sqrt(N))
site_avgs <- summarySE(site_dat, measurevar = "Bitter", groupvars = "Temp")
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n()
)
View(site_avgs)
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n(),
sd = sd(Bitter)
)
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n(),
sd = sd(Bitter)
)
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n()
)
ggplot(site_avgs) +
geom_point(aes(x = Temp, y = bitter_avg))
ggplot(site_avgs) +
geom_point(aes(x = Temp, y = bitter_avg, size = n_crabs))
ggplot(site_avgs) +
geom_point(aes(x = Temp, y = bitter_avg, size = n_crabs)) +
labs(title = sites[1])
# Create filepath to save graphs
temp_graphs <- "../output/ADFG_SE_AK_pot_surveys/diagnostic_images/site_specific_graphs/"
# Copy over data, rounding temp to nearest 0.1 degree
bitter <- crab_dat
bitter$Temp <- round(bitter$Temp, digits = 1)
# Create filepath to save graphs
temp_graphs <- "../output/ADFG_SE_AK_pot_surveys/diagnostic_images/site_specific_graphs/"
# Create a vector of all sites
sites <- unique(bitter$Site)
# Start our for loop. Each time we will filter data to only include data from one site, summarize, and graph
for (i in 1:length(sites)) {
site_dat <- bitter %>%
dplyr::filter(Site == sites[i])
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n())
ggplot(site_avgs) +
geom_point(aes(x = Temp, y = bitter_avg, size = n_crabs)) +
labs(title = sites[i])
ggsave(filename = paste0(temp_graphs, sites[i]), plot = last_plot(), device = "pdf")
}
# Copy over data, rounding temp to nearest 0.1 degree
bitter <- crab_dat
bitter$Temp <- round(bitter$Temp, digits = 1)
# Create filepath to save graphs
temp_graphs <- "../output/ADFG_SE_AK_pot_surveys/diagnostic_images/site_specific_graphs/"
# Create a vector of all sites
sites <- unique(bitter$Site)
# Start our for loop. Each time we will filter data to only include data from one site, summarize, and graph
for (i in 1:length(sites)) {
site_dat <- bitter %>%
dplyr::filter(Site == sites[i])
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n())
ggplot(site_avgs) +
geom_point(aes(x = Temp, y = bitter_avg, size = n_crabs)) +
labs(title = sites[i])
ggsave(filename = paste0(temp_graphs, sites[i], ".png"), plot = last_plot(), device = png())
}
# Copy over data, rounding temp to nearest 0.1 degree
bitter <- crab_dat
bitter$Temp <- round(bitter$Temp, digits = 1)
# Create filepath to save graphs
temp_graphs <- "../output/ADFG_SE_AK_pot_surveys/diagnostic_images/site_specific_graphs/"
# Create a vector of all sites
sites <- unique(bitter$Site)
# Start our for loop. Each time we will filter data to only include data from one site, summarize, and graph
for (i in 1:length(sites)) {
site_dat <- bitter %>%
dplyr::filter(Site == sites[i])
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n())
ggplot(site_avgs) +
geom_point(aes(x = Temp, y = bitter_avg, size = n_crabs)) +
labs(title = sites[i]) +
ylim(0, 1)
ggsave(filename = paste0(temp_graphs, sites[i], ".png"), plot = last_plot(), device = png())
}
View(bitter)
bitter <- crab_dat
bitter$Temp <- round(bitter$Temp, digits = 1)
# Create filepath to save graphs
temp_graphs <- "../output/ADFG_SE_AK_pot_surveys/diagnostic_images/site_specific_graphs/"
# Create a vector of all sites
sites <- unique(bitter$Site)
# Start our for loop. Each time we will filter data to only include data from one site, summarize, and graph
for (i in 1:length(sites)) {
site_dat <- bitter %>%
dplyr::filter(Site == sites[i])
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n())
ggplot(site_avgs) +
geom_point(aes(x = Temp, y = bitter_avg, size = n_crabs)) +
labs(title = sites[i]) +
xlim(3, 9.5)
ylim(0, 1)
ggsave(filename = paste0(temp_graphs, sites[i], ".png"), plot = last_plot(), device = png())
}
bitter <- crab_dat
bitter$Temp <- round(bitter$Temp, digits = 1)
# Create filepath to save graphs
temp_graphs <- "../output/ADFG_SE_AK_pot_surveys/diagnostic_images/site_specific_graphs/"
# Create a vector of all sites
sites <- unique(bitter$Site)
# Start our for loop. Each time we will filter data to only include data from one site, summarize, and graph
for (i in 1:length(sites)) {
site_dat <- bitter %>%
dplyr::filter(Site == sites[i])
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n())
ggplot(site_avgs) +
geom_point(aes(x = Temp, y = bitter_avg, size = n_crabs)) +
geom_smooth(aes(x = Temp, y = bitter_avg), method = lm, se = FALSE)
labs(title = sites[i]) +
xlim(3, 9.5)
ylim(0, 1)
ggsave(filename = paste0(temp_graphs, sites[i], ".png"), plot = last_plot(), device = png())
}
?geom_smooth
# Copy over data, rounding temp to nearest 0.1 degree
bitter <- crab_dat
bitter$Temp <- round(bitter$Temp, digits = 1)
# Create filepath to save graphs
temp_graphs <- "../output/ADFG_SE_AK_pot_surveys/diagnostic_images/site_specific_graphs/"
# Create a vector of all sites
sites <- unique(bitter$Site)
# Start our for loop. Each time we will filter data to only include data from one site, summarize, and graph
for (i in 1:length(sites)) {
site_dat <- bitter %>%
dplyr::filter(Site == sites[i])
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n())
ggplot(site_avgs) +
geom_point(aes(x = Temp, y = bitter_avg, size = n_crabs)) +
geom_smooth(aes(x = Temp, y = bitter_avg, weight = n_crabs), method = lm, se = FALSE)
labs(title = sites[i]) +
xlim(3, 9.5)
ylim(0, 1)
ggsave(filename = paste0(temp_graphs, sites[i], ".png"), plot = last_plot(), device = png())
}
# Start our for loop. Each time we will filter data to only include data from one site, summarize, and graph
for (i in 1:length(sites)) {
site_dat <- bitter %>%
dplyr::filter(Site == sites[i])
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n())
ggplot(site_avgs) +
geom_point(aes(x = Temp, y = bitter_avg, size = n_crabs)) +
geom_smooth(aes(x = Temp, y = bitter_avg), method = lm, se = FALSE)
labs(title = sites[i]) +
xlim(3, 9.5)
ylim(0, 1)
ggsave(filename = paste0(temp_graphs, sites[i], ".png"), plot = last_plot(), device = png())
}
# Copy over data, rounding temp to nearest 0.1 degree
bitter <- crab_dat
bitter$Temp <- round(bitter$Temp, digits = 1)
# Create filepath to save graphs
temp_graphs <- "../output/ADFG_SE_AK_pot_surveys/diagnostic_images/site_specific_graphs/"
# Create a vector of all sites
sites <- unique(bitter$Site)
# Start our for loop. Each time we will filter data to only include data from one site, summarize, and graph
for (i in 1:length(sites)) {
site_dat <- bitter %>%
dplyr::filter(Site == sites[i])
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n())
ggplot(site_avgs) +
geom_point(aes(x = Temp, y = bitter_avg, size = n_crabs)) +
geom_smooth(aes(x = Temp, y = bitter_avg), method = lm, se = FALSE)
labs(title = sites[i]) +
xlim(3, 9.5)
ylim(0, 1)
ggsave(filename = paste0(temp_graphs, sites[i], ".png"), plot = last_plot(), device = png())
dev_off()
}
?dev.off
# Copy over data, rounding temp to nearest 0.1 degree
bitter <- crab_dat
bitter$Temp <- round(bitter$Temp, digits = 1)
# Create filepath to save graphs
temp_graphs <- "../output/ADFG_SE_AK_pot_surveys/diagnostic_images/site_specific_graphs/"
# Create a vector of all sites
sites <- unique(bitter$Site)
# Start our for loop. Each time we will filter data to only include data from one site, summarize, and graph
for (i in 1:length(sites)) {
site_dat <- bitter %>%
dplyr::filter(Site == sites[i])
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n())
ggplot(site_avgs) +
geom_point(aes(x = Temp, y = bitter_avg, size = n_crabs)) +
geom_smooth(aes(x = Temp, y = bitter_avg), method = lm, se = FALSE)
labs(title = sites[i]) +
xlim(3, 9.5)
ylim(0, 1)
ggsave(filename = paste0(temp_graphs, sites[i], ".png"), plot = last_plot(), device = png())
dev.off()
}
# Start our for loop. Each time we will filter data to only include data from one site, summarize, and graph
for (i in 1:length(sites)) {
site_dat <- bitter %>%
dplyr::filter(Site == sites[i])
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n())
ggplot(site_avgs) +
geom_point(aes(x = Temp, y = bitter_avg, size = n_crabs)) +
geom_smooth(aes(x = Temp, y = bitter_avg, weight = n_crabs), method = lm, se = FALSE)
labs(title = sites[i]) +
xlim(3, 9.5)
ylim(0, 1)
ggsave(filename = paste0(temp_graphs, sites[i], ".png"), plot = last_plot(), device = png())
dev.off()
}
# Start our for loop. Each time we will filter data to only include data from one site, summarize, and graph
for (i in 1:length(sites)) {
site_dat <- bitter %>%
dplyr::filter(Site == sites[i])
site_avgs <- site_dat %>%
group_by(Temp) %>%
summarize(bitter_avg = mean(Bitter),
n_crabs = n())
ggplot(site_avgs) +
geom_point(aes(x = Temp, y = bitter_avg, size = n_crabs)) +
geom_smooth(aes(x = Temp, y = bitter_avg, weight = n_crabs), method = lm, se = FALSE) +
labs(title = sites[i]) +
xlim(3, 9.5) +
ylim(0, 1)
ggsave(filename = paste0(temp_graphs, sites[i], ".png"), plot = last_plot(), device = png())
dev.off()
}
knitr::opts_chunk$set(echo = TRUE)
# Add all required libraries here
list.of.packages <- c("tidyverse", "lme4", "MuMIn", "rcompanion", "MASS", "generalhoslem", "mgcv", "beepr", "regclass", "car", "DHARMa", "broom.mixed", "dotwhisker", "glmmTMB", "performance", "effects")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Read in custom functions
source("hemat_modeling_functions.R")
model_filepath <- "../output/ADFG_SE_AK_pot_surveys/models/weighted_models/all_crabs/"
avg_model <- readRDS(file = paste0(model_filepath, "avg_model.rds"))
# Get coefficients
summary(avg_model)
# Get coefficients
summary(avg_model)
### Plot infection data as binomial with regression line
ggplot(crab_dat, aes(x = Temp, y = Bitter)) +
geom_point(alpha = 0.5) +
stat_smooth(method = "glm", se = FALSE, method.args = list(family = binomial))
dev.off()
### Plot infection data as binomial with regression line
ggplot(crab_dat, aes(x = Temp, y = Bitter)) +
geom_point(alpha = 0.5) +
stat_smooth(method = "glm", se = FALSE, method.args = list(family = binomial))
### Plot infection data as binomial with regression line
ggplot(crab_dat, aes(x = Temp, y = Bitter)) +
geom_point(alpha = 0.5)
### Plot infection data as binomial with regression line
ggplot(crab_dat) +
geom_point(aes(x = Temp, y = Bitter))
ggplot(bitter) +
geom_bar(aes(x = Year, y = bitter_avg), stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
bitter <- crab_dat
bitter <- bitter %>%
group_by(Year) %>%
summarize(bitter_avg = mean(Bitter)) %>%
ungroup()
ggplot(bitter) +
geom_bar(aes(x = Year, y = bitter_avg), stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
bitter <- crab_dat
bitter <- bitter %>%
group_by(Year) %>%
summarize(bitter_avg = mean(Bitter)) %>%
ungroup()
ggplot(bitter) +
geom_bar(aes(x = Year, y = bitter_avg), stat = "identity") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
### Plot infection data as binomial with regression line
p <- ggplot(crab_dat) +
geom_point(aes(x = Temp, y = Bitter))
print(p)
