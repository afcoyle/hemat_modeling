# See class of each column
str(crabdat)
# Looks like we've got lots of columns that should be converted to factors!
crabdat$Species <- factor(crabdat$Species)
crabdat$Sex <- factor(crabdat$Sex)
crabdat$Shell_Condition <- ordered(crabdat$Shell_Condition)
crabdat$PCR_Result <- factor(crabdat$PCR_Result)
crabdat$Year <- factor(crabdat$Year)
crabdat$Location <- factor(crabdat$Location)
# See updated class of each column
str(crabdat)
# Pull all numeric variables into a new data frame
crabnums <- select_if(crabdat, is.numeric)
# Calculate correlation
numcor <- cor(crabnums, method = "pearson")
# See the resulting table
print(numcor)
# See if any correlations are > 0.6 (our bar for correlation) and less than 1 (since every variable is perfectly correlated with itself)
any(abs(numcor) > 0.6 & numcor <1)
# See how many correlations we have (since each correlation is shown twice - A vs B and B vs A - the true number of correlations is 1/2 this number)
sum(abs(numcor) > 0.6 & numcor <1)
# See the resulting table
print(numcor)
# Pull all categorical variables into a new data frame
crabcat = select_if(crabdat, is.factor)
# Turn all from factors to numeric
crabcat[] <- sapply(crabcat, as.numeric)
# Initialize a blank matrix
results_matrix <- matrix(nrow = length(crabcat), ncol = length(crabcat))
# Name all rows and columns with our variable names
colnames(results_matrix) <- names(crabcat)
rownames(results_matrix) <- names(crabcat)
for (i in 1:ncol(crabcat)) {
for (j in 1:ncol(crabcat)) {
cramer.table <- table(crabcat[,i],crabcat[,j])
cramer.matrix <- as.matrix(cramer.table)
results_matrix[i,j] <- cramerV(cramer.matrix)
}
}
# Turn all from factors to numeric
crabcat[] <- sapply(crabcat, as.numeric)
# Initialize a blank matrix
results_matrix <- matrix(nrow = length(crabcat), ncol = length(crabcat))
# Name all rows and columns with our variable names
colnames(results_matrix) <- names(crabcat)
rownames(results_matrix) <- names(crabcat)
results_matrix
for (i in 1:ncol(crabcat)) {
for (j in 1:ncol(crabcat)) {
cramer.table <- table(crabcat[,i],crabcat[,j])
cramer.matrix <- as.matrix(cramer.table)
results_matrix[i,j] <- cramerV(cramer.matrix)
}
}
crabcat
# Pull all categorical variables into a new data frame
crabcat = select_if(crabdat, is.factor)
# First, since all crabs are C. bairdi, we can drop the Species column
crabdat <- select(crabdat, -Species)
?select
# See class of each column
str(crabdat)
# First, since all crabs are C. bairdi, we can drop the Species column
crabdat <- subset(crabdat, select = -Species)
# See class of each column
str(crabdat)
# Looks like we've got lots of columns that should be converted to factors!
crabdat$Sex <- factor(crabdat$Sex)
crabdat$Shell_Condition <- ordered(crabdat$Shell_Condition)
crabdat$PCR_Result <- factor(crabdat$PCR_Result)
crabdat$Year <- factor(crabdat$Year)
crabdat$Location <- factor(crabdat$Location)
# See updated class of each column
str(crabdat)
# Pull all numeric variables into a new data frame
crabnums <- select_if(crabdat, is.numeric)
# Calculate correlation
numcor <- cor(crabnums, method = "pearson")
# See the resulting table
print(numcor)
# See if any correlations are > 0.6 (our bar for correlation) and less than 1 (since every variable is perfectly correlated with itself)
any(abs(numcor) > 0.6 & numcor <1)
# See how many correlations we have (since each correlation is shown twice - A vs B and B vs A - the true number of correlations is 1/2 this number)
sum(abs(numcor) > 0.6 & numcor <1)
# Pull all categorical variables into a new data frame
crabcat = select_if(crabdat, is.factor)
# Pull all categorical variables into a new data frame
crabcat <-  select_if(crabdat, is.factor)
# Pull all categorical variables into a new data frame
crabcat <-  select_if(crabdat, is.factor)
# Turn all from factors to numeric
crabcat[] <- sapply(crabcat, as.numeric)
# Initialize a blank matrix
results_matrix <- matrix(nrow = length(crabcat), ncol = length(crabcat))
# Name all rows and columns with our variable names
colnames(results_matrix) <- names(crabcat)
rownames(results_matrix) <- names(crabcat)
for (i in 1:ncol(crabcat)) {
for (j in 1:ncol(crabcat)) {
cramer.table <- table(crabcat[,i],crabcat[,j])
cramer.matrix <- as.matrix(cramer.table)
results_matrix[i,j] <- cramerV(cramer.matrix)
}
}
# See the resulting matrix
print(results_matrix)
# See if any of our correlations, aside from self-correlations, cross our boundary of too much correlation
any(abs(results_matrix) > 0.6 & results_matrix < 1)
# See the resulting matrix
print(results_matrix)
crabrank <- crabdat
crabrank[] <- sapply(crabdat, as.numeric)
crabcomps <- cor(crabrank, method = "spearman")
any(abs(crabcomps) > 0.6 & crabcomps < 1)
linkages <- which(abs(crabcomps) > 0.6 & crabcomps < 1, arr.ind = TRUE)
# List linkages
for (i in 1:(0.5*length(linkages))) {
print(names(crabdat)[c(linkages[i,])])
}
# List linkages
for (i in 1:(0.5*length(linkages))) {
print(names(crabdat)[c(linkages[i,])])
}
crabcomps
ggplot(crabdat, aes(x = Shell_Condition, y = Carapace_Width)) +
geom_violin()
# List linkages
for (i in 1:(0.5*length(linkages))) {
print(names(crabdat)[c(linkages[i,])])
}
linkages
crabcomps
# List linkages
for (i in 1:(0.5*length(linkages))) {
print(names(crabdat)[c(linkages[i,])])
}
print(0.5*length(linkages))
table(crabdat$Location)
# Add all required libraries here
list.of.packages <- c("tidyverse", "lme4", "MuMIn", "rcompanion", "MASS", "generalhoslem", "mgcv", "rnaturalearth", "rnaturalearthdata", "sf", "rgeos")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
ggplot(data = world) +
geom_sf() +
geom_point(data =crabdat, aes(x = Longitude, y = Latitude, size = sum(Location)), size = 1, shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
world
world <- ne_countries(scale = "medium", returnclass = "sf")
ggplot(data = world) +
geom_sf() +
geom_point(data =crabdat, aes(x = Longitude, y = Latitude, size = sum(Location)), size = 1, shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data =crabdat, aes(x = Longitude, y = Latitude, size = sum(Location)),  shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data =crabdat, aes(x = Longitude, y = Latitude, size = Location), shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data =crabdat, aes(x = Longitude, y = Latitude, size = Location), shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data =crabdat, aes(x = Longitude, y = Latitude), shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
count(crabdat$Latitude)
table(crabdat$Latitude)
crab_latlong <- table(crabdat$Latitude, crabdat$Longitude)
crab_latlong <- table(crabdat$Latitude, crabdat$Longitude)
crab_latlong <- summaryBy(crabdat~Latitude + Longitude, data = crabdat, FUN = length)
?summaryBy
# Add all required libraries here
list.of.packages <- c("tidyverse", "lme4", "MuMIn", "rcompanion", "MASS", "generalhoslem", "mgcv", "rnaturalearth", "rnaturalearthdata", "sf", "rgeos", "doBy")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
crab_latlong <- summaryBy(crabdat~Latitude + Longitude, data = crabdat, FUN = length)
View(crab_latlong)
ggplot(data = world) +
geom_sf() +
geom_point(data = crab_latlong, aes(x = Longitude, y = Latitude, size = Latitude.length), shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crab_latlong, aes(x = Longitude, y = Latitude, size = Latitude.length, color = Location), shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crab_latlong, aes(x = Longitude, y = Latitude, size = Latitude.length), shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, size = Depth), shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, size = Depth), shape = 7) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, size = Depth), shape = 2) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, size = Depth), shape = 3) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, size = Depth), shape = 4) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, size = Depth), shape = 5) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, size = Depth), shape = 6) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, size = Depth), shape = 7) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, size = Depth), shape =87) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, size = Depth), shape =8) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, size = Depth), shape = 1) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, color = Depth), shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, color = scale_color_viridis_c(depth)), shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, color = scale_color_viridis_c(Depth)), shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, color = Depth), shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crab_latlong, aes(x = Longitude, y = Latitude, size = Latitude.length), shape = 16) +
scale_fill_continuous(type = "gradient") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, color = Depth), shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, color = Depth), shape = 16) +
scale_fill_continuous(type = "gradient") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, color = Depth), shape = 16) +
scale_fill_continuous(type = "viridis") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = crabdat, aes(x = Location, y = Depth)) +
geom_violin()
sum(crabdat$Location = "NS"
sum(crabdat$Location == "NS"
sum(crabdat$Location == "NS"
sum(crabdat$Location == "NS")
crabdat$s.Year <- crabdat$Year - (min(crabdat$Year) - 1)
crabdat <- read.csv("../output/NOAA_EBS_trawl_survey/modified_data/cleaned_bairdi.csv")
# First, since all crabs are C. bairdi, we can drop the Species column
crabdat <- subset(crabdat, select = -Species)
# See class of each column
str(crabdat)
# Looks like we've got lots of columns that should be converted to factors!
crabdat$Sex <- factor(crabdat$Sex)
crabdat$Shell_Condition <- ordered(crabdat$Shell_Condition)
crabdat$PCR_Result <- factor(crabdat$PCR_Result)
crabdat$Location <- factor(crabdat$Location)
# See updated class of each column
str(crabdat)
# Pull all numeric variables into a new data frame
crabnums <- select_if(crabdat, is.numeric)
# Calculate correlation
numcor <- cor(crabnums, method = "pearson")
# See the resulting table
print(numcor)
# See if any correlations are > 0.6 (our bar for correlation) and less than 1 (since every variable is perfectly correlated with itself)
any(abs(numcor) > 0.6 & numcor <1)
# See how many correlations we have (since each correlation is shown twice - A vs B and B vs A - the true number of correlations is 1/2 this number)
sum(abs(numcor) > 0.6 & numcor <1)
# Pull all categorical variables into a new data frame
crabcat <-  select_if(crabdat, is.factor)
# Turn all from factors to numeric
crabcat[] <- sapply(crabcat, as.numeric)
# Initialize a blank matrix
results_matrix <- matrix(nrow = length(crabcat), ncol = length(crabcat))
# Name all rows and columns with our variable names
colnames(results_matrix) <- names(crabcat)
rownames(results_matrix) <- names(crabcat)
# Fill in the matrix by performing Cramer's V test on each possible combination of factors
for (i in 1:ncol(crabcat)) {
for (j in 1:ncol(crabcat)) {
cramer.table <- table(crabcat[,i],crabcat[,j])
cramer.matrix <- as.matrix(cramer.table)
results_matrix[i,j] <- cramerV(cramer.matrix)
}
}
# See the resulting matrix
print(results_matrix)
# See if any of our correlations, aside from self-correlations, cross our boundary of too much correlation
any(abs(results_matrix) > 0.6 & results_matrix < 1)
# Looks like we have no correlation between categorical variables!
crabrank <- crabdat
crabrank[] <- sapply(crabdat, as.numeric)
crabcomps <- cor(crabrank, method = "spearman")
any(abs(crabcomps) > 0.6 & crabcomps < 1)
linkages <- which(abs(crabcomps) > 0.6 & crabcomps < 1, arr.ind = TRUE)
# List linkages
for (i in 1:(0.5*length(linkages))) {
print(names(crabdat)[c(linkages[i,])])
}
print(0.5*length(linkages))
ggplot(crabdat, aes(x = Shell_Condition, y = Carapace_Width)) +
geom_violin()
crab_latlong <- summaryBy(crabdat~Latitude + Longitude, data = crabdat, FUN = length)
world <- ne_countries(scale = "medium", returnclass = "sf")
ggplot(data = world) +
geom_sf() +
geom_point(data = crab_latlong, aes(x = Longitude, y = Latitude, size = Latitude.length), shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, color = Depth), shape = 16) +
scale_fill_continuous(type = "viridis") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
crabdat$s.Year <- crabdat$Year - (min(crabdat$Year) - 1)
# Scale all other continuous variables
class(crabdat)
# Scale all other continuous variables
str(crabdat)
# Scale all other continuous variables
crabdat <- CW_scaled <- scale(crabdat$Carapace_Width)
str(crabdat)
str(crabdat)
crabdat <- read.csv("../output/NOAA_EBS_trawl_survey/modified_data/cleaned_bairdi.csv")
# First, since all crabs are C. bairdi, we can drop the Species column
crabdat <- subset(crabdat, select = -Species)
# See class of each column
str(crabdat)
# Looks like we've got lots of columns that should be converted to factors!
crabdat$Sex <- factor(crabdat$Sex)
crabdat$Shell_Condition <- ordered(crabdat$Shell_Condition)
crabdat$PCR_Result <- factor(crabdat$PCR_Result)
crabdat$Location <- factor(crabdat$Location)
# See updated class of each column
str(crabdat)
# Pull all numeric variables into a new data frame
crabnums <- select_if(crabdat, is.numeric)
# Calculate correlation
numcor <- cor(crabnums, method = "pearson")
# See the resulting table
print(numcor)
# See if any correlations are > 0.6 (our bar for correlation) and less than 1 (since every variable is perfectly correlated with itself)
any(abs(numcor) > 0.6 & numcor <1)
# See how many correlations we have (since each correlation is shown twice - A vs B and B vs A - the true number of correlations is 1/2 this number)
sum(abs(numcor) > 0.6 & numcor <1)
# Pull all categorical variables into a new data frame
crabcat <-  select_if(crabdat, is.factor)
# Turn all from factors to numeric
crabcat[] <- sapply(crabcat, as.numeric)
# Initialize a blank matrix
results_matrix <- matrix(nrow = length(crabcat), ncol = length(crabcat))
# Name all rows and columns with our variable names
colnames(results_matrix) <- names(crabcat)
rownames(results_matrix) <- names(crabcat)
# Fill in the matrix by performing Cramer's V test on each possible combination of factors
for (i in 1:ncol(crabcat)) {
for (j in 1:ncol(crabcat)) {
cramer.table <- table(crabcat[,i],crabcat[,j])
cramer.matrix <- as.matrix(cramer.table)
results_matrix[i,j] <- cramerV(cramer.matrix)
}
}
# See the resulting matrix
print(results_matrix)
# See if any of our correlations, aside from self-correlations, cross our boundary of too much correlation
any(abs(results_matrix) > 0.6 & results_matrix < 1)
# Looks like we have no correlation between categorical variables!
crabrank <- crabdat
crabrank[] <- sapply(crabdat, as.numeric)
crabcomps <- cor(crabrank, method = "spearman")
any(abs(crabcomps) > 0.6 & crabcomps < 1)
linkages <- which(abs(crabcomps) > 0.6 & crabcomps < 1, arr.ind = TRUE)
# List linkages
for (i in 1:(0.5*length(linkages))) {
print(names(crabdat)[c(linkages[i,])])
}
print(0.5*length(linkages))
ggplot(crabdat, aes(x = Shell_Condition, y = Carapace_Width)) +
geom_violin()
crab_latlong <- summaryBy(crabdat~Latitude + Longitude, data = crabdat, FUN = length)
world <- ne_countries(scale = "medium", returnclass = "sf")
ggplot(data = world) +
geom_sf() +
geom_point(data = crab_latlong, aes(x = Longitude, y = Latitude, size = Latitude.length), shape = 16) +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = world) +
geom_sf() +
geom_point(data = crabdat, aes(x = Longitude, y = Latitude, color = Depth), shape = 16) +
scale_fill_continuous(type = "viridis") +
coord_sf(xlim = c(-180, -160), ylim = c(50, 70), expand = FALSE)
ggplot(data = crabdat, aes(x = Location, y = Depth)) +
geom_violin()
# Subtract the year before the earliest data, so year now starts at 1
crabdat$s.Year <- crabdat$Year - (min(crabdat$Year) - 1)
# Scale all other continuous variables
crabdat$CW_scaled <- scale(crabdat$Carapace_Width)
str(crabdat)
crabdat$Latitude_scaled <- scale(crabdat$Latitude)
crabdat$Longitude_scaled <- scale(crabdat$Longitude)
crabdat$Depth_scaled <- scale(crabdat$Depth)
str(crabdat)
crabdat <- subset(crabdat, select = -Julian_Day)
str(crabdat)
crabdat$Bottom_Temp_scaled <- scale(crabdat$Bottom_Temp)
str(crabdat)
test_mod <- glmer(PCR_Result ~ CW_scaled + Latitude_scaled + Longitude_scaled + Bottom_Temp_scaled + Sex + Shell_Condition + (1 | s.Year),
data = crabdat,
family = binomial,
na.action = "na.fail", # this chunk is for dredge()
control = glmerControl(optimizer = c("bobyqa")))
dredge(test_mod)
View(test_mod)
summary(test_mod)
latlong_mod <- glmer(PCR_Result ~ CW_scaled + Latitude_scaled + Longitude_scaled + Bottom_Temp_scaled + Sex + Shell_Condition + (1 | s.Year),
data = crabdat,
family = binomial,
na.action = "na.fail", # this chunk is for dredge()
control = glmerControl(optimizer = c("bobyqa")))
long_mod1 <- glmer(PCR_Result ~ CW_scaled +  Longitude_scaled + Bottom_Temp_scaled + Sex + Shell_Condition + (1 | s.Year),
data = crabdat,
family = binomial,
na.action = "na.fail", # this chunk is for dredge()
control = glmerControl(optimizer = c("bobyqa")))
latlong_mod2 <- glmer(PCR_Result ~ CW_scaled +  Longitude_scaled + Latitude_scaled + Bottom_Temp_scaled + Sex + Shell_Condition + (1 | s.Year),
data = crabdat,
family = binomial,
na.action = "na.fail", # this chunk is for dredge()
control = glmerControl(optimizer = c("bobyqa")))
loc_mod3 <- glmer(PCR_Result ~ CW_scaled + Bottom_Temp_scaled + Sex + Shell_Condition + (1 | s.Year) + (1 | Location),
data = crabdat,
family = binomial,
na.action = "na.fail", # this chunk is for dredge()
control = glmerControl(optimizer = c("bobyqa")))
depth_mod4 <- glmer(PCR_Result ~ CW_scaled + Depth_scaled + Bottom_Temp_scaled + Sex + Shell_Condition + (1 | s.Year),
data = crabdat,
family = binomial,
na.action = "na.fail", # this chunk is for dredge()
control = glmerControl(optimizer = c("bobyqa")))
extractAIC(long_mod1)
extractAIC(latlong_mod2)
extractAIC(loc_mod3)
extractAIC(depth_mod4)
extractAIC(long_mod1)
extractAIC(latlong_mod2)
extractAIC(loc_mod3)
extractAIC(depth_mod4)
lap_mods <- dredge(depth_mod4, beta = "none",
eval = TRUE,
rank = "AICc")
lap_mods
# Get all models with weights above 0.01
best_models <- get.models(lap_mods, subset = weight > 0.01)
# Look at first model
summary(best_models[[1]])
summary(best_models[[2]])
best_models
lap_mods
# Look at second model (weight = 0.21)
summary(best_models[[2]])
lap_mods
# Look at third model (weight = 0.14)
summary(best_models[[3]])
avg_model <- model.avg(best_models, beta = "none")
# See what the average model looks like
avg_model$coefficients
summary(avg_model)
View(crab_latlong)
