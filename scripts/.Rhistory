# Give column names
names(issue) <- c("row", "datetime", "temp_f")
# Select only those columns
issue <- issue %>%
select(datetime, temp_f)
# Split datetime column using the space
issue <- issue %>%
separate(datetime, c("date", "time"), sep = " ")
# Convert temperature from F to C
issue$temp_f <- (issue$temp_f - 32)*(5/9)
# Rename column to signify the change to C
names(issue) <- c("date", "time", "temp")
# Write out file
write.csv(issue, file = leg2_files[i],
row.names = FALSE)
}
# Add all required libraries here
list.of.packages <- c("tidyverse", "readxl", "lubridate")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Load custom functions
source("hemat_modeling_functions.R")
# For the sake of formatting, don't put a trailing / at the end of the path
full_dat <- read_tidbit_data(data_path = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2005")
years <- as.character(2006:2019)
for (i in 1:length(years)) {
temp_dat <- read_tidbit_data(data_path = paste0("../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/", years[i]))
full_dat <- rbind(full_dat, temp_dat)
}
colSums(is.na(full_dat))
# Now we'll check for weird values in all columns
table(full_dat$year)
table(full_dat$survey)
table(full_dat$tidbit_id)
head(sort(full_dat$tidbit_datetime))
head(sort(full_dat$tidbit_datetime, decreasing = TRUE))
View(full_dat)
knitr::opts_chunk$set(echo = TRUE)
# Add all required libraries here
list.of.packages <- c("tidyverse", "readxl", "writexl", "lubridate")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Load custom functions
source("hemat_modeling_functions.R")
## RKC Survey, Leg 3, Tidbit #7
# Issue: for half, the columns are separated by tabs. At row 128 and below, the first two columns (Date and Time) are separated by spaces. This messes with how the file reads in
issue <- read.delim(file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2007/RKC_survey/Leg_3/7.TXT", row.names = NULL)
# Rename columns
names(issue) <- c("Date", "Time", "Temperature")
# Move Time column at rows 128+ to Temperature
issue[-(1:127), ]$Temperature <- issue[-(1:127), ]$Time
# Split Date column at rows 128+, move latter half to Time
issue[-(1:127), ]$Time <- gsub("^.*? ", "", issue[-(1:127), ]$Date)
# Remove second half of Date column at rows 128+
issue[-(1:127), ]$Date <- gsub(" .*$", "", issue[-(1:127), ]$Date)
# Done! Now we'll just write this out as a text file
write.table(issue, file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2007/RKC_survey/Leg_3/7.TXT",
sep = "\t",
row.names = FALSE)
## RKC Survey, Leg 3, Tidbit #13
# Same issue as RKC Leg 3, Tidbit #7 above
# Only difference: it's reading in as two columns the whole way down
issue <- read.delim(file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2007/RKC_survey/Leg_3/13.TXT", row.names = NULL)
# Split first column into two
issue <- issue %>%
separate(Date.Time, c("Date", "Time"), sep = " ")
# Done! Now we'll just write this out as a text file
write.table(issue, file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2007/RKC_survey/Leg_3/13.TXT",
sep = "\t",
row.names = FALSE)
## RKC Survey, Leg 1, Tidbit 21
# Exact same issue as RKC Leg 3, Tidbit #13 above
issue <- read.delim(file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2007/RKC_survey/Leg_1/21.TXT", row.names = NULL)
# Split first column into two
issue <- issue %>%
separate(Date.Time, c("Date", "Time"), sep = " ")
# Done! Now we'll just write this out as a text file
write.table(issue, file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2007/RKC_survey/Leg_1/21.TXT",
sep = "\t",
row.names = FALSE)
leg_files <- list.files(path = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2008/RKC_survey/Leg_1", full.names = TRUE)
for (i in 1:length(leg_files)) {
print(leg_files[i])
print(i)
# Read in file
issue <- read.delim(file = leg_files[i], header = TRUE,
sep = "\t")
# Standardize table size
# If 2 columns, they're datetime and temp
# If 3, they're date, time, and temp
if ("Date.Time" %in% names(issue)) {
issue <- issue %>%
separate(Date.Time, into = c("Date", "Time"), sep = " ")
}
# Rename columns
names(issue) <- c("date", "time", "temp")
# Write out file
write_delim(issue, file = leg_files[i], delim ="\t")
}
leg_files <- list.files(path = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2008/RKC_survey/Leg_2", full.names = TRUE)
for (i in 1:length(leg_files)) {
print(leg_files[i])
print(i)
# Read in file
issue <- read.delim(file = leg_files[i], header = TRUE,
sep = "\t")
# Standardize table size
# If 2 columns, they're datetime and temp
# If 3, they're date, time, and temp
if ("Date.Time" %in% names(issue)) {
issue <- issue %>%
separate(Date.Time, into = c("Date", "Time"), sep = " ")
}
# Rename columns
names(issue) <- c("date", "time", "temp")
# Write out file
write_delim(issue, file = leg_files[i], delim ="\t")
}
leg_files <- list.files(path = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2008/RKC_survey/Leg_3", full.names = TRUE)
for (i in 1:length(leg_files)) {
print(leg_files[i])
print(i)
# Read in file
issue <- read.delim(file = leg_files[i], header = TRUE,
sep = "\t")
# Standardize table size
# If 2 columns, they're datetime and temp
# If 3, they're date, time, and temp
if ("Date.Time" %in% names(issue)) {
issue <- issue %>%
separate(Date.Time, into = c("Date", "Time"), sep = " ")
}
# Rename columns
names(issue) <- c("date", "time", "temp")
# Write out file
write_delim(issue, file = leg_files[i], delim ="\t")
}
# Read in Tidbit 14
issue <- read.delim(file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2009/Tanner_survey/Leg_2/14.txt",
col.names = c("Row", "Date", "Temp", "Unknown", "Unknown", "Unknown", "Unknown", "Unknown", "Unknown"))
# Select only columns with useful info
issue <- issue %>%
select(c("Date", "Temp"))
# We now just need to split the Date column into Date and Time
issue <- issue %>%
separate(Date, c("Date", "Time"), sep = " ")
# Done! Write it out
write.table(issue, file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2009/Tanner_survey/Leg_2/14.txt",
sep = "\t",
row.names = FALSE)
issue <- read.delim(file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2012/RKC_survey/Leg_1/21.TXT",
col.names = c("DateTime", "Temp"))
# We now just need to split the DateTime column into Date and Time
issue <- issue %>%
separate(DateTime, c("Date", "Time"), sep = " ")
# Perfect, now just write it out
write.table(issue, file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2012/RKC_survey/Leg_1/21.TXT",
sep = "\t",
row.names = FALSE)
source("hemat_modeling_functions.R")
# Fix 2013 RKC, Leg 2, Tidbit #1
fix_long_csvs("../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2013/RKC_survey/Leg_2/1.txt")
# Same for RKC, Leg 2, Tidbit 15
fix_long_csvs("../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2013/RKC_survey/Leg_2/15.txt")
#Also RKC, Leg 2, Tidbit 26
fix_long_csvs("../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2013/RKC_survey/Leg_2/26.txt")
# RKC, Leg 2, Tidbit 27
fix_long_csvs("../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2013/RKC_survey/Leg_2/27.txt")
# RKC, Leg 2, Tidbit 9
fix_long_csvs("../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2013/RKC_survey/Leg_2/9.txt")
### We also need to fix some tables in which the first column is date while the second is time,temp (connected by a comma). Let's fix those:
fix_timetemp_comma(filepath = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2013/RKC_survey/Leg_3/26.txt")
fix_timetemp_comma(filepath =  "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2013/RKC_survey/Leg_3/1.txt")
fix_timetemp_comma(filepath =  "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2013/RKC_survey/Leg_3/15.txt")
fix_timetemp_comma(filepath =  "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2013/RKC_survey/Leg_3/9.txt")
# We also have some longer, more elaborate fixes for 2013. Let's address them below:
# RKC, Leg 3, Tidbit 27
# Issue: all variables are together in a single column
filepath <- "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2013/RKC_survey/Leg_3/27.txt"
issue <- read.delim(file = filepath)
# Split the combined column apart using the space
issue <- issue %>%
separate(Date.Time.Temperature....C., c("Date", "TimeTemp"), sep = " ")
# Split the time/temp column apart using the comma
issue <- issue %>%
separate(TimeTemp, c("Time", "Temp"), sep = ",")
# Done! Write it out
write.table(issue, file = filepath,
sep = "\t",
row.names = FALSE)
# Leg 2
issue <- read.csv(file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/RKC_survey/Leg_2/17.csv",
skip = 2, header = FALSE)
#Select columns 2 and 3 (datetime and temp)
issue <- issue[, 2:3]
# Rename columns
names(issue) <- c("datetime", "temp")
# Split datetime column
issue <- issue %>%
separate(datetime, c("date", "time"), sep = "16 ", extra = "merge")
View(issue)
# Paste 16 onto the end of the date column
issue$date <- paste0(issue$date, "16")
# Eliminate rows with NAs
issue <- na.omit(issue)
?write_delim
#### Tidbit 17
# Leg 2
issue <- read.csv(file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/RKC_survey/Leg_2/17.csv",
skip = 2, header = FALSE)
#Select columns 2 and 3 (datetime and temp)
issue <- issue[, 2:3]
# Rename columns
names(issue) <- c("datetime", "temp")
# Split datetime column
issue <- issue %>%
separate(datetime, c("date", "time"), sep = "16 ", extra = "merge")
# Paste 16 onto the end of the date column
issue$date <- paste0(issue$date, "16")
# Eliminate rows with NAs
issue <- na.omit(issue)
# Write out file as .txt
write_delim(issue, file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/RKC_survey/Leg_2/17.txt")
# Leg 3
issue <- read.csv(file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/RKC_survey/Leg_3/17.txt",
skip = 2, header = FALSE)
issue <- read.csv(file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/RKC_survey/Leg_3/17.csv",
skip = 2, header = FALSE)
#Select columns 2 and 3 (datetime and temp)
issue <- issue[, 2:3]
# Rename columns
names(issue) <- c("datetime", "temp")
# Split datetime column
issue <- issue %>%
separate(datetime, c("date", "time"), sep = "16 ", extra = "merge")
# Paste 16 onto the end of the date column
issue$date <- paste0(issue$date, "16")
# Eliminate rows with NAs
issue <- na.omit(issue)
# Write out file
write_delim(issue, file = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/RKC_survey/Leg_3/17.txt")
#### Temperature Conversions
# Leg 1
leg_files <- list.files(path = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/RKC_survey/Leg_1/", full.names = TRUE, recursive = TRUE)
for (i in 1:length(leg_files)) {
print(leg_files[i])
print(i)
# Read in file
issue <- read_excel(path = leg_files[i], col_names = FALSE, skip = 2)
# Give column names
suppressWarnings(names(issue) <- c("rows", "datetime", "temp_f"))
# Select only those columns
issue <- issue %>%
select(datetime, temp_f)
# Convert temperature from F to C
issue$temp_f <- (as.numeric(issue$temp_f) - 32)*(5/9)
# Split datetime column
issue <- issue %>%
separate(datetime, c("date", "time"), sep = "16 ", extra = "merge")
# Rename column to signify the change to C
names(issue) <- c("date", "time", "temp")
# Paste 16 onto the end of the date column
issue$date <- paste0(issue$date, "16")
# Eliminate rows with NAs
issue <- na.omit(issue)
# Remove extension from file, replace with .txt
leg_files[i] <- leg_files[i] %>%
str_replace(file_ext(leg_files[i]), "txt")
# Write out file
write_delim(issue, file = leg_files[i],
delim = "\t")
}
# Leg 3
leg_files <- list.files(path = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/RKC_survey/Leg_3/", full.names = TRUE, recursive = TRUE)
for (i in 1:length(leg_files)) {
print(leg_files[i])
# Skip if it's Tidbit 17, we already fixed it
if (leg_files[i] == "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/RKC_survey/Leg_3/17.txt") {
} else {
print(i)
# Read in file
issue <- read.csv(file = leg_files[i], header = FALSE, skip = 2)
# Give column names
suppressWarnings(names(issue) <- c("row", "datetime", "temp_f"))
# Select only those columns
issue <- issue %>%
select(datetime, temp_f)
# Convert temperature from F to C
issue$temp_f <- (as.numeric(issue$temp_f) - 32)*(5/9)
# Split the datetime column
issue <- issue %>%
separate(datetime, c("date", "time"), sep = "16 ", extra = "merge")
# Rename column to signify the change to C
names(issue) <- c("date", "time", "temp")
# Paste 16 onto the end of the date column
issue$date <- paste0(issue$date, "16")
# Eliminate rows with NAs
issue <- na.omit(issue)
# Change to a .txt file
leg_files[i] <- leg_files[i] %>%
str_replace(file_ext(leg_files[i]), "txt")
# Write out file
write_delim(issue, file = leg_files[i],
delim = "\t")
}
}
source("hemat_modeling_functions.R")
# Fix errors in overly long column names
# Leg 1
fix_longhead_txt(filepath = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/Tanner_survey/Leg_1/18.txt")
fix_longhead_txt(filepath = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/Tanner_survey/Leg_1/19.txt")
fix_longhead_txt(filepath = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/Tanner_survey/Leg_1/26.txt")
# Leg 2
fix_longhead_txt(filepath = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/Tanner_survey/Leg_2/18.txt")
# Standardize columns so our dates read in correctly
leg_files <- list.files(path = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/Tanner_survey/Leg_1/", full.names = TRUE)
for (i in 1:length(leg_files)) {
print(leg_files[i])
print(i)
# Read in file
issue <- read.delim(file = leg_files[i], header = TRUE)
# Remove all columns with only NAs
issue <- issue[, colSums(is.na(issue)) < nrow(issue)]
# If 2 columns, split. Otherwise, leave.
if (length(names(issue)) == 2) {
# Name columns
names(issue) <- c("datetime", "temp")
# Split datetime column
issue <- issue %>%
separate(datetime, c("date", "time"), sep = "16 ")
# Paste 16 onto the end of the date column
issue$date <- paste0(issue$date, "16")
# Remove rows with just NAs
issue <- na.omit(issue)
} else {
# Give column names
suppressWarnings(names(issue) <- c("date", "time", "temp"))
# Eliminate rows with just NAs
issue <- na.omit(issue)
}
# Write out file
write_delim(issue, file = leg_files[i],
delim = "\t")
}
leg_files <- list.files(path = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2016/Tanner_survey/Leg_2/", full.names = TRUE)
for (i in 1:length(leg_files)) {
print(leg_files[i])
print(i)
# Read in file
issue <- read.delim(file = leg_files[i], header = TRUE)
# Remove all columns with only NAs
issue <- issue[, colSums(is.na(issue)) < nrow(issue)]
# If 2 columns, split. Otherwise, leave.
if (length(names(issue)) == 2) {
# Name columns
names(issue) <- c("datetime", "temp")
# Split datetime column
issue <- issue %>%
separate(datetime, c("date", "time"), sep = "16 ")
# Paste 16 onto the end of the date column
issue$date <- paste0(issue$date, "16")
# Remove rows with just NAs
issue <- na.omit(issue)
} else {
# Give column names
suppressWarnings(names(issue) <- c("date", "time", "temp"))
# Eliminate rows with just NAs
issue <- na.omit(issue)
}
# Write out file
write_delim(issue, file = leg_files[i],
delim = "\t")
}
####  RKC Leg 1
# 18
filepath <- "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2017/RKC_survey/Leg_1/18.txt"
count.fields(filepath, sep = "\t")
issue <- read.delim(file = filepath, col.names = c("Date", "Time", "Temp", rep("Trash", times = 7)))
issue <- issue %>%
select(Date, Time, Temp)
write.table(issue, file = filepath,
sep = "\t",
row.names = FALSE)
#### RKC Leg 2
# 18
filepath <- "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2017/RKC_survey/Leg_2/18.txt"
count.fields(filepath, sep = "\t")
issue <- read.delim(file = filepath, col.names = c("Date", "Time", "Temp", rep("Trash", times = 7)))
issue <- issue %>%
select(Date, Time, Temp)
write.table(issue, file = filepath,
sep = "\t",
row.names = FALSE)
# 22
filepath <- "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2017/RKC_survey/Leg_2/22.txt"
count.fields(filepath, sep = "\t")
issue <- read.delim(file = filepath, col.names = c("Date", "Time", "Temp", rep("Trash", times = 7)))
issue <- issue %>%
select(Date, Time, Temp)
write.table(issue, file = filepath,
sep = "\t",
row.names = FALSE)
### RKC Leg 3
# 12
filepath <- "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2017/RKC_survey/Leg_3/12.txt"
count.fields(filepath, sep = "\t")
issue <- read.delim(file = filepath, col.names = c("Date", "Time", "Temp", rep("Trash", times = 7)))
issue <- issue %>%
select(Date, Time, Temp)
write.table(issue, file = filepath,
sep = "\t",
row.names = FALSE)
# 18
filepath <- "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2017/RKC_survey/Leg_3/18.txt"
count.fields(filepath, sep = "\t")
issue <- read.delim(file = filepath, col.names = c("Date", "Time", "Temp", rep("Trash", times = 7)))
issue <- issue %>%
select(Date, Time, Temp)
write.table(issue, file = filepath,
sep = "\t",
row.names = FALSE)
# RKC Leg 1
# 26
fix_txt_headers(filepath = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2018/RKC_survey/Leg_1/26.txt")
# RKC Leg 2
# 26
fix_txt_headers(filepath =  "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2018/RKC_survey/Leg_2/26.txt")
# RKC Leg 3
# 13
fix_txt_headers(filepath = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2018/RKC_survey/Leg_3/13.txt")
# 26
fix_txt_headers(filepath = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2018/RKC_survey/Leg_3/26.txt")
#### Leg 1
# 26
fix_txt_headers(filepath = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2019/RKC_survey/Leg_1/26.txt")
#### Leg 3
# 22
fix_txt_headers(filepath = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2019/RKC_survey/Leg_3/22.txt")
leg2_files <- list.files(path = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2019/RKC_survey/Leg_2/", full.names = TRUE, recursive = TRUE)
for (i in 1:length(leg2_files)) {
print(leg2_files[i])
print(i)
# Read in file
issue <- read.csv(file = leg2_files[i], header = FALSE, skip = 2)
# Give column names
names(issue) <- c("row", "datetime", "temp_f")
# Select only those columns
issue <- issue %>%
select(datetime, temp_f)
# Split datetime column using the space
issue <- issue %>%
separate(datetime, c("date", "time"), sep = " ")
# Convert temperature from F to C
issue$temp_f <- (issue$temp_f - 32)*(5/9)
# Rename column to signify the change to C
names(issue) <- c("date", "time", "temp")
# Write out file
write.csv(issue, file = leg2_files[i],
row.names = FALSE)
}
# Add all required libraries here
list.of.packages <- c("tidyverse", "readxl", "lubridate")
# Get names of all required packages that aren't installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[, "Package"])]
# Install all new packages
if(length(new.packages)) install.packages(new.packages)
# Load all required libraries
lapply(list.of.packages, FUN = function(X) {
do.call("require", list(X))
})
# Load custom functions
source("hemat_modeling_functions.R")
# For the sake of formatting, don't put a trailing / at the end of the path
full_dat <- read_tidbit_data(data_path = "../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/2005")
years <- as.character(2006:2019)
for (i in 1:length(years)) {
temp_dat <- read_tidbit_data(data_path = paste0("../output/ADFG_SE_AK_pot_surveys/cleaned_data/temperature_data/", years[i]))
full_dat <- rbind(full_dat, temp_dat)
}
colSums(is.na(full_dat))
# Now we'll check for weird values in all columns
table(full_dat$year)
table(full_dat$survey)
table(full_dat$tidbit_id)
head(sort(full_dat$tidbit_datetime))
head(sort(full_dat$tidbit_datetime, decreasing = TRUE))
head(sort(full_dat$Temp))
head(sort(full_dat$Temp, decreasing = TRUE))
# Convert formats to correct ones
full_dat$year <- as.numeric(full_dat$year)
full_dat$tidbit_datetime <- as_datetime(full_dat$tidbit_datetime, tz = "US/Alaska")
# To ensure all date/times were converted directly, check the hours for each year/survey combo
full_dat$hour <- hour(full_dat$tidbit_datetime)
table(full_dat$hour, full_dat$year)
# Everything looks great - no year has any sort of bias for pre-12pm, and values are typically within a few tens per hour.
full_dat <- full_dat %>%
select(-hour)
# We'll double check that times weren't rounded by examining the distribution of minutes. Looking for odd numbers of :00
full_dat$min <- minute(full_dat$tidbit_datetime)
table(full_dat$min, full_dat$year)
